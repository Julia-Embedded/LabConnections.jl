var documenterSearchIndex = {"docs":
[{"location":"examples/examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"The following examples may be run from the BB, and may require the user to export the the LabConnections module to the LOAD_PATH manually, executing the following line in the Julia prompt","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"push!(LOAD_PATH, \"/home/debian/juliapackages\")","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"When running the examples with hardware in the loop, take caution not to short the BB ground with any output pin, as this will damage the board. For instance, if connecting a diode to the output pins, always use a resistor of >1000 Ohm in parallel. See the configuration page for information on which functionality specific pins support.","category":"page"},{"location":"examples/examples/#Example-with-LEDs-(BB)-1","page":"Examples","title":"Example with LEDs (BB)","text":"","category":"section"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"To test the system LED functionality of the Julia code from the BBB, open a Julia prompt and run the SYSLEDtest.jl file","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"include(\"/home/debian/juliapackages/LabConnections/test/BeagleBone/SYS_LED_test.jl\")","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"This example runs a test with hardware in the loop, exporting and unexporting the SYS_LED devices and blinking led D2-D5 in a sequence over 1 second, alternating with D2/D4 and D3/D5 on/off.","category":"page"},{"location":"examples/examples/#Example-with-GPIOs-(BB)-1","page":"Examples","title":"Example with GPIOs (BB)","text":"","category":"section"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"To test the GPIO functionality of the Julia code from the BBB, open a Julia prompt and run the GPIO_test.jl file","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"include(\"/home/debian/juliapackages/LabConnections/test/BeagleBone/GPIO_test.jl\")","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"This again runs the tests with the BBB in the loop, testing exception handling exporting of the file system and also runs all the GPIOs on the board high/low at a 0.1 period time over 1 second to demonstrate the IO communication visually.","category":"page"},{"location":"examples/examples/#Example-with-PWM-(BB)-1","page":"Examples","title":"Example with PWM (BB)","text":"","category":"section"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"To test the PWM functionality of the Julia code from the BBB, open a Julia prompt and run the PWM_test.jl file","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"include(\"/home/debian/juliapackages/LabConnections/test/BeagleBone/PWM_test.jl\")","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"This runs the PWM tests with the BBB in the loop, testing exception handling exporting of the file system. In addition, it runs all the PWM pins on the board with a duty cycle of 0.5 over a period time over 1 second to demonstrate the IO communication visually.","category":"page"},{"location":"examples/examples/#Example-with-SPI-(BB)-1","page":"Examples","title":"Example with SPI (BB)","text":"","category":"section"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"All development on the SPI is currently done in C in a for of the serbus package. Consequently, this example is currently run completely separate from the LabConnections.","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"Make sure that the serbus package exists in the /juliapackages/ directory, where it is automatically placed when transferring code to the BB using the ./flash_BB shell script. Then simply run","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"cp /home/debian/juliapackages/serbus/bb_spi.sh /home/debian","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"and execute","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"./bb_spi.sh","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"in the /home/debian/ directory. The program then","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"Compiles a device tree overlay (should SPI1 be used)\nCreates the binaries for the SPI driver and example\nRuns the MCP3903 example script located in spi_MCP3903.c","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"The purpose of the program is to configure the ADC to operate in the continuous mode and then read the registers, outputting the measurements in the terminal.","category":"page"},{"location":"examples/examples/#Example-with-LEDs-(HOST)-1","page":"Examples","title":"Example with LEDs (HOST)","text":"","category":"section"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"To operate the LEDs from the host computer, simply connect the BBB to the HOST via USB and run the \"testLED.jl\" on the HOST","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"cd && cd .julia/v0.6/LabConnections/Examples/ && julia testLED.jl","category":"page"},{"location":"examples/examples/#","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/testing/#Tests-1","page":"Tests","title":"Tests","text":"","category":"section"},{"location":"examples/testing/#","page":"Tests","title":"Tests","text":"The BeagleBone tests can be run on any computer, regrdless of their file-syste. By setting the flag RUNNING_TESTS to true, a dummy file-system is exported in which the tests are run operate. This has the advantage of enabling testing of the code run on the BB free from the BB itself, without building the Debian FS, thereby enabling the automatic testing through Travis.","category":"page"},{"location":"examples/testing/#","page":"Tests","title":"Tests","text":"To run the tests, simply enter the /test/ directory and run","category":"page"},{"location":"examples/testing/#","page":"Tests","title":"Tests","text":"julia run_tests.jl","category":"page"},{"location":"examples/testing/#","page":"Tests","title":"Tests","text":"If the tests are to be run on the BB with hardware in the loop, run","category":"page"},{"location":"examples/testing/#","page":"Tests","title":"Tests","text":"julia run_tests.jl","category":"page"},{"location":"examples/testing/#","page":"Tests","title":"Tests","text":"on the BB, to run examples separately, see","category":"page"},{"location":"#LabConnections.jl-Manual-1","page":"LabConnections.jl Manual","title":"LabConnections.jl Manual","text":"","category":"section"},{"location":"#","page":"LabConnections.jl Manual","title":"LabConnections.jl Manual","text":"CurrentModule = LabConnections","category":"page"},{"location":"#Examples-1","page":"LabConnections.jl Manual","title":"Examples","text":"","category":"section"},{"location":"#","page":"LabConnections.jl Manual","title":"LabConnections.jl Manual","text":"Pages = [\"examples/examples.md\", \"examples/testing.md\"]\nDepth = 1","category":"page"},{"location":"#Guide-1","page":"LabConnections.jl Manual","title":"Guide","text":"","category":"section"},{"location":"#","page":"LabConnections.jl Manual","title":"LabConnections.jl Manual","text":"Pages = [\"man/introduction.md\", \"man/installation.md\"]\nDepth = 1","category":"page"},{"location":"#Functions-1","page":"LabConnections.jl Manual","title":"Functions","text":"","category":"section"},{"location":"#","page":"LabConnections.jl Manual","title":"LabConnections.jl Manual","text":"Pages = [\"lib/io_devices.md\", \"lib/functions.md\"]","category":"page"},{"location":"#Documentation-Index-1","page":"LabConnections.jl Manual","title":"Documentation Index","text":"","category":"section"},{"location":"#","page":"LabConnections.jl Manual","title":"LabConnections.jl Manual","text":"Pages = [\"lib/io_devices.md\", \"lib/functions.md\"]\nDepth = 1","category":"page"},{"location":"lib/functions/#","page":"Available functions","title":"Available functions","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"lib/functions/#Available-functions-1","page":"Available functions","title":"Available functions","text":"","category":"section"},{"location":"lib/functions/#","page":"Available functions","title":"Available functions","text":"Modules = [LabConnections.BeagleBone]\nOrder   = [:function]","category":"page"},{"location":"lib/functions/#LabConnections.BeagleBone.run_server","page":"Available functions","title":"LabConnections.BeagleBone.run_server","text":"run_server(port=2001; debug=false)\n\nRun a server on port that listens for commands from computer Optional debug keyword disables blinking system leds.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Base.read","page":"Available functions","title":"Base.read","text":"l = read(led::SysLED, debug::Bool=false)\n\nReads the current brightness value from the LED 'SysLED'.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Base.read","page":"Available functions","title":"Base.read","text":"l = read(pwm::PWM, operation::Int32, debug::Bool=false)\n\nReads the current value from an operation on a GPIO.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Base.read","page":"Available functions","title":"Base.read","text":"l = read(gpio::GPIO, operation::Int32, debug::Bool=false)\n\nReads the current value from an operation on a GPIO.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.assert_pwm_write-Tuple{Int32,String}","page":"Available functions","title":"LabConnections.BeagleBone.assert_pwm_write","text":"assert_pwm_write(operation::Int32, entry::String)\n\nAssertsion for the PWM input data.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.bbparse-Tuple{Any}","page":"Available functions","title":"LabConnections.BeagleBone.bbparse","text":"bbparse(cmd)\n\nParse and execute the command cmd.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.bbparse-Tuple{Tuple,Any}","page":"Available functions","title":"LabConnections.BeagleBone.bbparse","text":"bbparse(l::Tuple, sock)\n\nParse input on the form l=(iswrite, ndev, cmd1, cmd2, ..., cmdn) where if iswrite     cmdi = (devname, id, val)     and if not iswrite     cmdi = (devname, id) and send back on socket (vals, timestamps).\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.closedev-Tuple{String,Int32}","page":"Available functions","title":"LabConnections.BeagleBone.closedev","text":"closedev(dev_name::String, i::Int32)\n\nCloses down a currently active device of type 'dev_name' at index 'i' on the BeagleBone, and removes it from the dict of currently active devices.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.export_gpio-Tuple{Int32}","page":"Available functions","title":"LabConnections.BeagleBone.export_gpio","text":"export_gpio(i::Int32, debug::Bool=false)\n\nExport the GPIO file system, either for real-time or testing usecases.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.export_led","page":"Available functions","title":"LabConnections.BeagleBone.export_led","text":"export_led(i::Int32, debug::Bool=false)\n\nExports a dummy filesystem for testing the LED implementation\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.export_pwm-Tuple{Int32}","page":"Available functions","title":"LabConnections.BeagleBone.export_pwm","text":"export_gpio(i::Int32, debug::Bool=false)\n\nExport the GPIO file system, either for real-time or testing usecases.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.getdev-Tuple{String,Int32}","page":"Available functions","title":"LabConnections.BeagleBone.getdev","text":"dev = getdev(dev_name::String, i::Int32)\n\nRetrieves the active device of type dev_name at index 'i'.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.initdev-Tuple{String,Int32}","page":"Available functions","title":"LabConnections.BeagleBone.initdev","text":"active_device = initdev(dev_name::String, i:Int32)\n\nInitializes a new device of type 'devname' at index 'i' on the BeagleBone, and adds it to the dict of currently active devices. Returns the initialized device 'activedevice'.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.listdev-Tuple{}","page":"Available functions","title":"LabConnections.BeagleBone.listdev","text":"message = listdev()\n\nLists all the active devices as an insidence array for testing.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.printdev-Tuple{String,Int32}","page":"Available functions","title":"LabConnections.BeagleBone.printdev","text":"message = printdev()\n\nPrints all the active devices and writes out specifics of a single devices.\n\n\n\n\n\n","category":"method"},{"location":"lib/functions/#LabConnections.BeagleBone.teardown","page":"Available functions","title":"LabConnections.BeagleBone.teardown","text":"teardown(led::SysLED, debug::Bool=false)\n\nCloses all open filestreams for the SysLED 'led'.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.teardown","page":"Available functions","title":"LabConnections.BeagleBone.teardown","text":"teardown(gpio::GPIO, debug::Bool=false)\n\nCloses all open streams on the GPIO, and unexports it from the file system.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.teardown","page":"Available functions","title":"LabConnections.BeagleBone.teardown","text":"teardown!(pwd::PWM)\n\nCloses all open streams on the PWM, and unexports it from the file system\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.to_string","page":"Available functions","title":"LabConnections.BeagleBone.to_string","text":"to_string(led::SysLED, debug::Bool=false)\n\nGenerates a string representation of the GPIO device.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.to_string","page":"Available functions","title":"LabConnections.BeagleBone.to_string","text":"to_string(gpio::GPIO, debug::Bool=false)\n\nGenerates a string representation of the GPIO device.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.to_string","page":"Available functions","title":"LabConnections.BeagleBone.to_string","text":"to_string(pwm::PWM,, debug::Bool=false)\n\nGenerates a string representation of the GPIO device.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.write!","page":"Available functions","title":"LabConnections.BeagleBone.write!","text":"write!(gpio::GPIO, args::Tuple{Int32,String}, debug::Bool=false)\n\nWrites an entry to an operation on a GPIO, of the form args = (operation, entry).\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.write!","page":"Available functions","title":"LabConnections.BeagleBone.write!","text":"write!(led::SysLED, val::Bool, debug::Bool=false)\n\nTurns the LED 'SysLed' on/off for val = true/false respectively.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LabConnections.BeagleBone.write!","page":"Available functions","title":"LabConnections.BeagleBone.write!","text":"write!(pwm::PWM, args::Tuple{Int32,String}, debug::Bool=false)\n\nWrites an entry to an operation on the PWM, of the form args = (operation, entry).\n\n\n\n\n\n","category":"function"},{"location":"lib/io_devices/#","page":"Available devices","title":"Available devices","text":"Pages = [\"io_devices.md\"]","category":"page"},{"location":"lib/io_devices/#Available-devices-1","page":"Available devices","title":"Available devices","text":"","category":"section"},{"location":"lib/io_devices/#","page":"Available devices","title":"Available devices","text":"Modules = [LabConnections.BeagleBone]\nOrder   = [:type]","category":"page"},{"location":"lib/io_devices/#LabConnections.BeagleBone.Debug","page":"Available devices","title":"LabConnections.BeagleBone.Debug","text":"Debug(i::Int32)\n\nType for debugging and precompile.\n\n\n\n\n\n","category":"type"},{"location":"lib/io_devices/#LabConnections.BeagleBone.GPIO","page":"Available devices","title":"LabConnections.BeagleBone.GPIO","text":"GPIO(i::Int32)\n\nLowest form of communication with the GPIO pins. The available pins are listed in the \"channel\" parameter, and appear as directories in /sys/class/gpio after being exported. For instance, to setup a GPIO on \"gpio112\", configure it as an output pin and set it to high, the following code would be used.\n\n`gpio = GPIO(1)`\n`write!(gpio, (2,\"out\"))`\n`write!(gpio, (1, \"1\"))`\n\nThe operation of reading the current output value of the GPIO is done by\n\n`read(gpio, 1)`\n\nSee the test/BeagleBone/GPIO_test.jl for more examples.\n\n\n\n\n\n","category":"type"},{"location":"lib/io_devices/#LabConnections.BeagleBone.IO_Object","page":"Available devices","title":"LabConnections.BeagleBone.IO_Object","text":"Define abstract type for pins/LEDS on the BeagleBone\n\n\n\n\n\n","category":"type"},{"location":"lib/io_devices/#LabConnections.BeagleBone.SysLED","page":"Available devices","title":"LabConnections.BeagleBone.SysLED","text":"SysLED(i::Int32)\n\nType representing the system LEDs on the BeagleBone. The LEDs are indexed by i ∈ [1,2,3,4].\n\n\n\n\n\n","category":"type"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"<a id='Installation-Instructions-1'></a>","category":"page"},{"location":"man/installation/#Installation-Instructions-1","page":"Installation Instructions","title":"Installation Instructions","text":"","category":"section"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"In these instructions we explain how to set up a working environment on a host computer and a BeagleBone Black. If you already have a prepared micro-SD card for flashing a BeagleBone,  then you can safely skip the first section of these instructions.","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"<a id='On-the-BBB-1'></a>","category":"page"},{"location":"man/installation/#Preparing-a-micro-SD-card-1","page":"Installation Instructions","title":"Preparing a micro-SD card","text":"","category":"section"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"First, we will prepare a micro-SD card with an image of Debian and a binary of Julia, which we then can flash onto the BeagleBone. Start by downloading the Debian image here (Debian 9.5 2018-10-07 4GB SD IoT) and write the image onto a micro-SD card (this guide is helpful). Proceed by downloading the Julia v1.0 binary for 32-bit ARMv7 found here. Put the .tar-file of the Julia binary on the micro-SD card containing the Debian image under /home/debian, and unzip it.  Make sure that the Julia folder has the correct name by typing","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"`mv /home/debian/julia-<distro specific tag>/bin/julia /home/debian/julia/bin/julia'","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"The file structure on the micro-SD now has the correct structure. The final step is to make sure that the micro-SD will automatically flash the Debian image onto the BeagleBone when booting up. To do this, follow the instructions found here. Congratulations, you now have a prepared micro-SD card ready for flashing BeagleBones.","category":"page"},{"location":"man/installation/#Flashing-the-BeagleBone-1","page":"Installation Instructions","title":"Flashing the BeagleBone","text":"","category":"section"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"Insert a prepared micro-SD card in the slot on the BeagleBone, and press down the boot button S2 (the button closest to the micro-SD slot) and hold it down while you plug in the USB-cable to the BeagleBone. Keep the S2 button held down for a couple of seconds, until the onboard LEDs start to blink. After a short while the onboard LEDs should start to flash in a wave pattern, indicating that the BeagleBone is being flashed. After a while (can vary between 5-45 minutes) the BeagleBone will be turn off automatically, indicating that the flashing is complete. Remove the micro-SD before powering on the BeagleBone again (otherwise it will start to flash the BeagleBone again).","category":"page"},{"location":"man/installation/#Trying-out-the-BeagleBone-1","page":"Installation Instructions","title":"Trying out the BeagleBone","text":"","category":"section"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"Now your BeagleBone is ready to use. Log on to the BeagleBone via SSH by opening a terminal and typing","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"`ssh debian@192.168.7.2'","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"The default password is temppwd. You are now logged in to the BeagleBone running Debian. The Julia binary should be located at /home/debian/julia-/bin/julia.  You can now start a Julia REPL on the BeagleBone by typing","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"`/home/debian/julia-<distro specific tag>/bin/julia'","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"If this works correctly, then you have a functioning BeagleBone ready for use with the LabConnections.jl package.","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"<a id='On-the-HOST-1'></a>","category":"page"},{"location":"man/installation/#Setting-up-the-host-computer-1","page":"Installation Instructions","title":"Setting up the host computer","text":"","category":"section"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"To get started, first install Julia v1.0.X on the host computer running a Linux distribution by following the instructions specified here. Once Julia is installed, run","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"using Pkg\n`Pkg.clone(https://gitlab.control.lth.se/labdev/LabConnections.jl)'","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"in the Julia REPL to install all dependencies on the host computer. The source code is then located in `./julia/v1.0/LabConnections'.","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"If you plan on working with the SPI devices to debug the ADC/DAC, then you will need a forked serbus' repository which wraps thelinux/spi/spidev'. Simply","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"`cd && cd .julia/v0.6'\n`git clone https://github.com/mgreiff/serbus'","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"to get the latest revision of the serbus fork.","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"To update the BB with the latest revision of the code,  ","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"`cd && cd .julia/v0.6/LabConnection/util'\n`./flash_BB.sh'","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"This scripts bundles the current code in LabCOnnections and serbus on the host computer and transfers it to the /home/debian/juliapackages directory on the BB.","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"<a id='Setting-up-automatic-communication-1'></a>","category":"page"},{"location":"man/installation/#Setting-up-automatic-communication-1","page":"Installation Instructions","title":"Setting up automatic communication","text":"","category":"section"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"To setup automatic start of Julia server on the BB, make sure to have completed all prior installation instructions, and that the lates revision of the LabConnections package is located on the BB. SSH to the BeagleBone and copy the julilaserver.service to the systemd/system","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"`ssh debian@192.168.7.2'\n`sudo cp -r /home/debian/juliapackets/LabConnections/src/BeagleBone/startup/juliaserver.service /lib/systemd/system/juliaserver.service` (on the BeagleBone)","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"Then execute the commands","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"sudo systemctl enable juliaserver (on the BeagleBone) sudo systemctl start juliaserver (on the BeagleBone)","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"After a while, the BeagleBone should start blinking on SysLED 2: on-off-on-sleep-repeat. The server should now start automatically on restart of the BeagleBone, and you should be able to run the examples in in /Examples on the host computer.","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"<a id='Debugging-1'></a>","category":"page"},{"location":"man/installation/#Debugging-1","page":"Installation Instructions","title":"Debugging","text":"","category":"section"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"No errors will be seen on the BeagleBone when the automatic startup is used. For debugging purposes it might be useful to start the service manually on the beagle bone. Start julia as root:","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"sudo /home/debian/julia/bin/julia","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"and run the startup script:","category":"page"},{"location":"man/installation/#","page":"Installation Instructions","title":"Installation Instructions","text":"include(\"/home/debian/juliapackages/LabConnections/src/BeagleBone/startup/startup.jl\")","category":"page"},{"location":"man/introduction/#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"man/introduction/#Installation-1","page":"Introduction","title":"Installation","text":"","category":"section"}]
}
